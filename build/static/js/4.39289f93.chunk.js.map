{"version":3,"sources":["components/Notification/Notification.js","components/Notification/Notification.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-transition-group/esm/CSSTransition.js","../node_modules/dom-helpers/esm/addClass.js","../node_modules/dom-helpers/esm/hasClass.js","redux/contacts/operations.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","pages/contactsPage/ContactsPage.js"],"names":["Notification","msg","error","in","appear","timeout","classNames","style","unmountOnExit","className","wrapper","notif","module","exports","replaceClassName","origClass","classToRemove","replace","RegExp","removeClass","node","classes","split","forEach","c","element","classList","remove","setAttribute","baseVal","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","appliedClasses","enter","exit","onEnter","maybeNode","maybeAppearing","_this$resolveArgument","resolveArguments","appearing","removeClasses","addClass","props","onEntering","_this$resolveArgument2","type","onEntered","_this$resolveArgument3","onExit","onExiting","onExited","nodeRef","current","getClassNames","isStringClassNames","baseClassName","activeClassName","doneClassName","_inheritsLoose","_proto","prototype","phase","scrollTop","add","contains","indexOf","hasClass","_addClass","_this$appliedClasses$","base","active","done","render","_this$props","_objectWithoutPropertiesLoose","React","createElement","Transition","_extends","Component","defaultProps","propTypes","axios","defaults","baseURL","addContact","name","number","dispatch","addContactRequest","post","then","data","addContactSuccess","catch","addContactError","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getContacts","getState","state","getContactsRequest","headers","common","Authorization","auth","token","get","getContactsSuccess","getContactsError","contacts","getFilter","filter","getLoading","loading","getFilteredContacts","createSelector","contact","toLowerCase","includes","getContactById","_","contactId","find","ContactForm","phone","isExist","handleChange","event","target","value","setState","handleSubmit","preventDefault","elem","setTimeout","styles","form","onSubmit","onChange","placeholder","required","btn","mapDispatchToProps","operations","connect","store","selectors","Filter","e","filterContact","input","filterContacts","handleDelete","showContacts","list","map","el","onClick","ContactsPage","getMyContacts"],"mappings":"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","file":"static/js/4.39289f93.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./Notification.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\nconst Notification = ({ msg, error }) => {\n  return (\n    <>\n      <CSSTransition\n        in={error}\n        appear={true}\n        timeout={500}\n        classNames={style}\n        unmountOnExit\n      >\n        <div className={style.wrapper}>\n          <p className={style.notif}>{msg}</p>\n        </div>\n      </CSSTransition>\n    </>\n  );\n};\n\nexport default Notification;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Notification_wrapper__Uy_Qy\",\"notif\":\"Notification_notif__1XW0G\",\"enter\":\"Notification_enter__1Q63C\",\"enterActive\":\"Notification_enterActive__y-ZzH\",\"exit\":\"Notification_exit__1TA8V\",\"exitActive\":\"Notification_exitActive__3mZBI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"btn\":\"ContactForm_btn__2Bpnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\"};","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    ;\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import hasClass from './hasClass';\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","export default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","import axios from \"axios\";\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  getContactsRequest,\n  getContactsSuccess,\n  getContactsError,\n} from \"./contactsAction\";\n\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com/\";\n\nconst addContact = ({ name, number }) => (dispatch) => {\n  dispatch(addContactRequest());\n  axios\n    .post(\"contacts\", { name, number })\n    .then(({ data }) => {\n      data = dispatch(addContactSuccess(data));\n      return data;\n    })\n    .catch((error) => dispatch(addContactError(error)));\n};\n\nconst deleteContact = (id) => (dispatch) => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch((error) => dispatch(deleteContactError(error)));\n};\n\nconst getContacts = () => (dispatch, getState) => {\n  const state = getState();\n  dispatch(getContactsRequest());\n  axios.defaults.headers.common.Authorization = `Bearer ${state.auth.token}`;\n  axios\n    .get(\"contacts\")\n    .then(({ data }) => dispatch(getContactsSuccess(data)))\n    .catch((error) => dispatch(getContactsError(error)));\n};\n\nexport default { addContact, deleteContact, getContacts };\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getLoading = ({ loading }) => loading;\n\nconst getContacts = (state) => state.contacts;\n\nconst getFilter = ( state ) => state.filter;\n\nconst getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter((contact) => contact.name.toLowerCase().includes(filter))\n);\n\nconst getContactById = createSelector(\n  [getContacts, (_, contactId) => contactId],\n  (contacts, contactId) => contacts.find(({ id }) => id === contactId)\n);\n\nexport default {\n  getLoading,\n  getContacts,\n  getFilter,\n  getFilteredContacts,\n  getContactById,\n};\n","import React, { Component } from \"react\";\nimport styles from \"./ContactForm.module.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { selectors, operations } from \"../../redux/contacts\";\nimport Notification from \"../Notification/Notification\";\n\nclass ContactForm extends Component {\n  static propTypes = { addContact: PropTypes.func.isRequired };\n  state = {\n    name: \"\",\n    phone: \"\",\n    isExist: false,\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { name, phone } = this.state;\n    const { contacts, addContact } = this.props;\n    const contact = {\n      name,\n      number: phone,\n    };\n    const condition = contacts.find((elem) => {\n      // console.log(elem.name);\n      return elem.name === contact.name;\n    });\n\n    if (condition) {\n      this.setState({ isExist: true });\n      setTimeout(() => this.setState({ isExist: false }), 2000);\n      return;\n    }\n    addContact(contact);\n    this.setState({ name: \"\", phone: \"\" });\n  };\n\n  render() {\n    const { name, phone, isExist } = this.state;\n    const { handleSubmit, handleChange } = this;\n    return (\n      <>\n        {isExist && <Notification msg=\"contact already exist\" />}\n        <form className={styles.form} onSubmit={handleSubmit}>\n          <input\n            onChange={handleChange}\n            placeholder=\"name\"\n            name=\"name\"\n            type=\"text\"\n            value={name}\n            required\n          />\n          <input\n            onChange={handleChange}\n            placeholder=\"phone number\"\n            name=\"phone\"\n            type=\"tel\"\n            value={phone}\n            required\n          />\n          <button className={styles.btn} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (store) => {\n  return { contacts: selectors.getContacts(store) };\n};\nconst mapDispatchToProps = { addContact: operations.addContact };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from \"react\";\nimport styles from \"./Filter.module.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { selectors } from \"../../redux/contacts\";\nimport filterContacts from \"../../redux/filter/filterAction\";\n\nclass Filter extends Component {\n  handleChange = (e) => {\n    const { filterContact } = this.props;\n    filterContact(e.target.value);\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    e.target.filter.value = \"\";\n  };\n\n  render() {\n    const { filter } = this.props;\n    const { handleChange, handleSubmit } = this;\n    return (\n      <form onSubmit={handleSubmit}>\n        <input\n          value={filter}\n          className={styles.input}\n          onChange={handleChange}\n          placeholder=\"Find contacts by name\"\n          name=\"filter\"\n          type=\"text\"\n        />\n      </form>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return { filter: selectors.getFilter(state) };\n};\nconst mapDispatchToProps = { filterContact: filterContacts };\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  filterContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport styles from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { selectors, operations } from \"../../redux/contacts\";\n\nconst ContactList = ({ showContacts, handleDelete }) => {\n  return (\n    <>\n      {showContacts && (\n        <ul className={styles.list}>\n          {showContacts.map((el) => {\n            return (\n              <li\n                onClick={() => {\n                  handleDelete(el.id);\n                }}\n                key={el.id}\n              >\n                {el.name}\n                <span>{el.number}</span>\n                <button className={styles.btn} type=\"button\">\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (store) => {\n  return {\n    showContacts: selectors.getFilteredContacts(store),\n  };\n};\nconst mapDispatchToProps = {\n  handleDelete: operations.deleteContact,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  showContacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport operations from \"../../redux/contacts/operations\";\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\nimport Filter from \"../../components/Filter/Filter\";\nimport ContactList from \"../../components/ContactList/ContactList\";\nimport styles from \"./ContactsPage.module.css\";\n\nclass ContactsPage extends Component {\n  componentDidMount() {\n    this.props.getMyContacts();\n  }\n  render() {\n    return (\n      <>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n// const mapStateToProps = (state) => {};\nconst mapDispatchToProps = {\n  getMyContacts: operations.getContacts,\n};\nexport default connect(null, mapDispatchToProps)(ContactsPage);\n"],"sourceRoot":""}