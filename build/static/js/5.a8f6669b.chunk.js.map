{"version":3,"sources":["components/Notification/Notification.js","components/Notification/Notification.module.css","pages/loginPage/LoginPage.js"],"names":["Notification","msg","error","in","appear","timeout","classNames","style","unmountOnExit","className","wrapper","notif","module","exports","LoginPage","state","email","password","handleChange","e","target","name","value","setState","handleSubmit","onLogin","props","preventDefault","this","onSubmit","Group","Label","Control","type","placeholder","onChange","variant","Component","mapDispatchToProps","operations","login","connect","selectors","getUserError"],"mappings":"gJAAA,2CAsBeA,IAlBM,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAC3B,OACE,mCACE,cAAC,IAAD,CACEC,GAAID,EACJE,QAAQ,EACRC,QAAS,IACTC,WAAYC,IACZC,eAAa,EALf,SAOE,qBAAKC,UAAWF,IAAMG,QAAtB,SACE,mBAAGD,UAAWF,IAAMI,MAApB,SAA4BV,Y,oBCdtCW,EAAOC,QAAU,CAAC,QAAU,8BAA8B,MAAQ,4BAA4B,MAAQ,4BAA4B,YAAc,kCAAkC,KAAO,2BAA2B,WAAa,mC,4LCM3NC,E,4MACJC,MAAQ,CACNC,MAAO,GACPC,SAAU,I,EAEZC,aAAe,SAACC,GAAO,IAAD,EACIA,EAAEC,OAAlBC,EADY,EACZA,KAAMC,EADM,EACNA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,K,EAE1BE,aAAe,SAACL,GAAO,IACbM,EAAY,EAAKC,MAAjBD,QACRN,EAAEQ,iBAIFF,EAHU,eACL,EAAKV,QAGV,EAAKQ,SAAS,CACZP,MAAO,GACPC,SAAU,M,4CAGd,WAAU,IACAC,EAA+BU,KAA/BV,aAAcM,EAAiBI,KAAjBJ,aADf,EAEqBI,KAAKb,MAAzBC,EAFD,EAECA,MAAOC,EAFR,EAEQA,SACPf,EAAU0B,KAAKF,MAAfxB,MACR,OACE,mCACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAM2B,SAAUL,EAAhB,UACE,eAAC,IAAKM,MAAN,WACE,cAAC,IAAKC,MAAN,oBACA,cAAC,IAAKC,QAAN,CACEC,KAAK,QACLZ,KAAK,QACLa,YAAY,QACZC,SAAUjB,EACVI,MAAON,OAGX,eAAC,IAAKc,MAAN,WACE,cAAC,IAAKC,MAAN,uBACA,cAAC,IAAKC,QAAN,CACEC,KAAK,WACLZ,KAAK,WACLa,YAAY,WACZC,SAAUjB,EACVI,MAAOL,OAGX,cAAC,IAAD,CAAQmB,QAAQ,UAAUH,KAAK,SAA/B,oBAGkB,kBAAV/B,GACN,cAAC,IAAD,CACEA,QAASA,EACTD,IAAI,+C,GAvDIoC,aAkElBC,EAAqB,CACzBb,QAASc,IAAWC,OAEPC,uBALS,SAAC1B,GAAD,MAAY,CAAEb,MAAOwC,IAAUC,aAAa5B,MAK5BuB,EAAzBG,CAA6C3B","file":"static/js/5.a8f6669b.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./Notification.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\n\nconst Notification = ({ msg, error }) => {\n  return (\n    <>\n      <CSSTransition\n        in={error}\n        appear={true}\n        timeout={500}\n        classNames={style}\n        unmountOnExit\n      >\n        <div className={style.wrapper}>\n          <p className={style.notif}>{msg}</p>\n        </div>\n      </CSSTransition>\n    </>\n  );\n};\n\nexport default Notification;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Notification_wrapper__Uy_Qy\",\"notif\":\"Notification_notif__1XW0G\",\"enter\":\"Notification_enter__1Q63C\",\"enterActive\":\"Notification_enterActive__y-ZzH\",\"exit\":\"Notification_exit__1TA8V\",\"exitActive\":\"Notification_exitActive__3mZBI\"};","import React, { Component } from \"react\";\nimport { Container, Form, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { operations, selectors } from \"../../redux/user\";\nimport Notification from \"../../components/Notification/Notification\";\nimport styles from \"./LoginPage.module.css\";\n\nclass LoginPage extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n  };\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n  handleSubmit = (e) => {\n    const { onLogin } = this.props;\n    e.preventDefault();\n    const user = {\n      ...this.state,\n    };\n    onLogin(user);\n    this.setState({\n      email: \"\",\n      password: \"\",\n    });\n  };\n  render() {\n    const { handleChange, handleSubmit } = this;\n    const { email, password } = this.state;\n    const { error } = this.props;\n    return (\n      <>\n        <Container>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group>\n              <Form.Label>email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"email\"\n                onChange={handleChange}\n                value={email}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"password\"\n                onChange={handleChange}\n                value={password}\n              />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">\n              log in\n            </Button>\n            {typeof error === \"string\" && (\n              <Notification\n                error={!!error}\n                msg=\"something went wrong, try agan \"\n              />\n            )}\n          </Form>\n        </Container>\n      </>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({ error: selectors.getUserError(state) });\n\nconst mapDispatchToProps = {\n  onLogin: operations.login,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\n"],"sourceRoot":""}